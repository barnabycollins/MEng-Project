import"./modulepreload-polyfill.b7f2da20.js";import{e as q,i as V,E as W,S as K}from"./synthContext.622f2464.js";class c{constructor(t=!1){this.eventMap={},this.eventsSuspended=t==1}addListener(t,e,n={}){if(typeof t=="string"&&t.length<1||t instanceof String&&t.length<1||typeof t!="string"&&!(t instanceof String)&&t!==c.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(typeof e!="function")throw new TypeError("The callback must be a function.");const s=new T(t,this,e,n);return this.eventMap[t]||(this.eventMap[t]=[]),n.prepend?this.eventMap[t].unshift(s):this.eventMap[t].push(s),s}addOneTimeListener(t,e,n={}){n.remaining=1,this.addListener(t,e,n)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(t,e){return t===void 0?!!(this.eventMap[c.ANY_EVENT]&&this.eventMap[c.ANY_EVENT].length>0)||Object.entries(this.eventMap).some(([,n])=>n.length>0):this.eventMap[t]&&this.eventMap[t].length>0?e instanceof T?this.eventMap[t].filter(n=>n===e).length>0:typeof e=="function"?this.eventMap[t].filter(n=>n.callback===e).length>0:e==null:!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(t){return this.eventMap[t]||[]}suspendEvent(t){this.getListeners(t).forEach(e=>{e.suspended=!0})}unsuspendEvent(t){this.getListeners(t).forEach(e=>{e.suspended=!1})}getListenerCount(t){return this.getListeners(t).length}emit(t,...e){if(typeof t!="string"&&!(t instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let n=[],s=this.eventMap[c.ANY_EVENT]||[];return this.eventMap[t]&&(s=s.concat(this.eventMap[t])),s.forEach(l=>{if(l.suspended)return;let h=[...e];Array.isArray(l.arguments)&&(h=h.concat(l.arguments)),l.remaining>0&&(n.push(l.callback.apply(l.context,h)),l.count++),--l.remaining<1&&l.remove()}),n}removeListener(t,e,n={}){if(t===void 0)return void(this.eventMap={});if(!this.eventMap[t])return;let s=this.eventMap[t].filter(l=>e&&l.callback!==e||n.remaining&&n.remaining!==l.remaining||n.context&&n.context!==l.context);s.length?this.eventMap[t]=s:delete this.eventMap[t]}async waitFor(t,e={}){return e.duration=parseInt(e.duration),(isNaN(e.duration)||e.duration<=0)&&(e.duration=1/0),new Promise((n,s)=>{let l,h=this.addListener(t,()=>{clearTimeout(l),n()},{remaining:1});e.duration!==1/0&&(l=setTimeout(()=>{h.remove(),s("The duration expired before the event was emitted.")},e.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class T{constructor(t,e,n,s={}){if(typeof t!="string"&&!(t instanceof String)&&t!==c.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!e)throw new ReferenceError("The 'target' parameter is mandatory.");if(typeof n!="function")throw new TypeError("The 'callback' must be a function.");s.arguments===void 0||Array.isArray(s.arguments)||(s.arguments=[s.arguments]),(s=Object.assign({context:e,remaining:1/0,arguments:void 0,duration:1/0},s)).duration!==1/0&&setTimeout(()=>this.remove(),s.duration),this.arguments=s.arguments,this.callback=n,this.context=s.context,this.count=0,this.event=t,this.remaining=parseInt(s.remaining)>=1?parseInt(s.remaining):1/0,this.suspended=!1,this.target=e}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}/**
 * The `Enumerations` class contains enumerations and arrays of elements used throughout the
 * library. All properties are static and should be referenced using the class name. For example:
 * `Enumerations.MIDI_CHANNEL_MESSAGES`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class r{static get MIDI_CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get MIDI_CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CONTROL_CHANGE_MESSAGES(){return{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-databuttonincrement","rpn-databuttondecrement"]}}/**
 * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
 *
 * `Note` objects can be played back on a single channel by calling
 * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
 * output, by calling [`Output.playNote()`]{@link Output#playNote}.
 *
 * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
 * These can be changed by passing in the appropriate option. It is also possible to set a
 * system-wide default for attack and release velocities by using the
 * [`WebMidi.defaults`](WebMidi#defaults) property.
 *
 * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
 * [`rawRelease`](#rawRelease) to both get and set the values.
 *
 * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
 * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
 * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
 * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
 * [`Output.stopNote()`]{@link Output#stopNote} or similar.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class f{constructor(t,e={}){this.duration=o.defaults.note.duration,this.attack=o.defaults.note.attack,this.release=o.defaults.note.release,e.duration!=null&&(this.duration=e.duration),e.attack!=null&&(this.attack=e.attack),e.rawAttack!=null&&(this.attack=i.from7bitToFloat(e.rawAttack)),e.release!=null&&(this.release=e.release),e.rawRelease!=null&&(this.release=i.from7bitToFloat(e.rawRelease)),Number.isInteger(t)?this.identifier=i.toNoteIdentifier(t):this.identifier=t}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(t){const e=i.getNoteDetails(t);if(o.validation&&!t)throw new Error("Invalid note identifier");this._name=e.name,this._accidental=e.accidental,this._octave=e.octave}get name(){return this._name}set name(t){if(o.validation&&(t=t.toUpperCase(),!["C","D","E","F","G","A","B"].includes(t)))throw new Error("Invalid name value");this._name=t}get accidental(){return this._accidental}set accidental(t){if(o.validation&&(t=t.toLowerCase(),!["#","##","b","bb"].includes(t)))throw new Error("Invalid accidental value");this._accidental=t}get octave(){return this._octave}set octave(t){if(o.validation&&(t=parseInt(t),isNaN(t)))throw new Error("Invalid octave value");this._octave=t}get duration(){return this._duration}set duration(t){if(o.validation&&(t=parseFloat(t),isNaN(t)||t===null||t<0))throw new RangeError("Invalid duration value.");this._duration=t}get attack(){return this._attack}set attack(t){if(o.validation&&(t=parseFloat(t),isNaN(t)||!(t>=0&&t<=1)))throw new RangeError("Invalid attack value.");this._attack=t}get release(){return this._release}set release(t){if(o.validation&&(t=parseFloat(t),isNaN(t)||!(t>=0&&t<=1)))throw new RangeError("Invalid release value.");this._release=t}get rawAttack(){return i.fromFloatTo7Bit(this._attack)}set rawAttack(t){this._attack=i.from7bitToFloat(t)}get rawRelease(){return i.fromFloatTo7Bit(this._release)}set rawRelease(t){this._release=i.from7bitToFloat(t)}get number(){return i.toNoteNumber(this.identifier)}getOffsetNumber(t=0,e=0){return o.validation&&(t=parseInt(t)||0,e=parseInt(e)||0),Math.min(Math.max(this.number+12*t+e,0),127)}}/**
 * The `Utilities` class contains general-purpose utility methods. All methods are static and
 * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class i{static toNoteNumber(t,e=0){if(e=e==null?0:parseInt(e),isNaN(e))throw new RangeError("Invalid 'octaveOffset' value");typeof t!="string"&&(t="");const n=this.getNoteDetails(t);if(!n)throw new TypeError("Invalid note identifier");let s=12*(n.octave+1+e);if(s+={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[n.name],n.accidental&&(n.accidental.startsWith("b")?s-=n.accidental.length:s+=n.accidental.length),s<0||s>127)throw new RangeError("Invalid octaveOffset value");return s}static getNoteDetails(t){Number.isInteger(t)&&(t=this.toNoteIdentifier(t));const e=t.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!e)throw new TypeError("Invalid note identifier");const n=e[1].toUpperCase(),s=parseInt(e[3]);let l=e[2].toLowerCase();return l=l===""?void 0:l,{accidental:l,identifier:n+(l||"")+s,name:n,octave:s}}static sanitizeChannels(t){let e;if(this.validation){if(t==="all")e=["all"];else if(t==="none")return[]}return e=Array.isArray(t)?t:[t],e.indexOf("all")>-1&&(e=r.MIDI_CHANNEL_NUMBERS),e.map(function(n){return parseInt(n)}).filter(function(n){return n>=1&&n<=16})}static toTimestamp(t){let e=!1;const n=parseFloat(t);return!isNaN(n)&&(typeof t=="string"&&t.substring(0,1)==="+"?n>=0&&(e=o.time+n):n>=0&&(e=n),e)}static guessNoteNumber(t,e){e=parseInt(e)||0;let n=!1;if(Number.isInteger(t)&&t>=0&&t<=127)n=parseInt(t);else if(parseInt(t)>=0&&parseInt(t)<=127)n=parseInt(t);else if(typeof t=="string"||t instanceof String)try{n=this.toNoteNumber(t.trim(),e)}catch{return!1}return n}static toNoteIdentifier(t,e){if(t=parseInt(t),isNaN(t)||t<0||t>127)throw new RangeError("Invalid note number");if(e=e==null?0:parseInt(e),isNaN(e))throw new RangeError("Invalid octaveOffset value");const n=Math.floor(t/12-1)+e;return["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][t%12]+n.toString()}static buildNote(t,e={}){if(e.octaveOffset=parseInt(e.octaveOffset)||0,t instanceof f)return t;let n=this.guessNoteNumber(t,e.octaveOffset);if(n===!1)throw new TypeError(`The input could not be parsed as a note (${t})`);return e.octaveOffset=void 0,new f(n,e)}static buildNoteArray(t,e={}){let n=[];return Array.isArray(t)||(t=[t]),t.forEach(s=>{n.push(this.buildNote(s,e))}),n}static from7bitToFloat(t){return t===1/0&&(t=127),t=parseInt(t)||0,Math.min(Math.max(t/127,0),1)}static fromFloatTo7Bit(t){return t===1/0&&(t=1),t=parseFloat(t)||0,Math.min(Math.max(Math.round(127*t),0),127)}static fromMsbLsbToFloat(t,e=0){o.validation&&(t=Math.min(Math.max(parseInt(t)||0,0),127),e=Math.min(Math.max(parseInt(e)||0,0),127));const n=((t<<7)+e)/16383;return Math.min(Math.max(n,0),1)}static fromFloatToMsbLsb(t){o.validation&&(t=Math.min(Math.max(parseFloat(t)||0,0),1));const e=Math.round(16383*t);return{msb:e>>7,lsb:127&e}}static offsetNumber(t,e=0,n=0){if(o.validation){if(t=parseInt(t),isNaN(t))throw new Error("Invalid note number");e=parseInt(e)||0,n=parseInt(n)||0}return Math.min(Math.max(t+12*e+n,0),127)}static getPropertyByValue(t,e){return Object.keys(t).find(n=>t[n]===e)}static getCcNameByNumber(t){return i.getPropertyByValue(r.MIDI_CONTROL_CHANGE_MESSAGES,t)}static getChannelModeByNumber(t){if(!(t>=120&&t<=127))return!1;for(let e in r.MIDI_CHANNEL_MODE_MESSAGES)if(r.MIDI_CHANNEL_MODE_MESSAGES.hasOwnProperty(e)&&t===r.MIDI_CHANNEL_MODE_MESSAGES[e])return e;return!1}static get isNode(){return new Function("try { return this === global; } catch(e) { return false; }")()}static get isBrowser(){return new Function("try { return this === window; } catch(e) { return false; }")()}}/**
 * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
 * provided by an [`Output`](Output) port which, itself, is made available by a device. The
 * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `OutputChannel` objects can be found inside the parent output's
 * [`channels`]{@link Output#channels} property.
 *
 * @param {Output} output The [`Output`](Output) this channel belongs to.
 * @param {number} number The MIDI channel number (`1` - `16`).
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class Q extends c{constructor(t,e){super(),this._output=t,this._number=e,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(t,e={time:0}){return this.output.send(t,e),this}sendKeyAftertouch(t,e,n={}){if(o.validation){if(n.useRawValue&&(n.rawValue=n.useRawValue),isNaN(parseFloat(e)))throw new RangeError("Invalid key aftertouch value.");if(n.rawValue){if(!(e>=0&&e<=127&&Number.isInteger(e)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(e>=0&&e<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}n.rawValue||(e=i.fromFloatTo7Bit(e));const s=o.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(t)||(t=[t]),i.buildNoteArray(t).forEach(l=>{this.send([(r.MIDI_CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),l.getOffsetNumber(s),e],{time:i.toTimestamp(n.time)})}),this}sendControlChange(t,e,n={}){if(typeof t=="string"&&(t=r.MIDI_CONTROL_CHANGE_MESSAGES[t]),Array.isArray(e)||(e=[e]),o.validation){if(t===void 0)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if((e=e.map(s=>{const l=Math.min(Math.max(parseInt(s),0),127);if(isNaN(l))throw new TypeError("Values must be integers between 0 and 127");return l})).length===2&&t>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return e.forEach((s,l)=>{this.send([(r.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),t+32*l,e[l]],{time:i.toTimestamp(n.time)})}),this}_selectNonRegisteredParameter(t,e={}){return this.sendControlChange(99,t[0],e),this.sendControlChange(98,t[1],e),this}_deselectRegisteredParameter(t={}){return this.sendControlChange(101,127,t),this.sendControlChange(100,127,t),this}_deselectNonRegisteredParameter(t={}){return this.sendControlChange(101,127,t),this.sendControlChange(100,127,t),this}_selectRegisteredParameter(t,e={}){return this.sendControlChange(101,t[0],e),this.sendControlChange(100,t[1],e),this}_setCurrentParameter(t,e={}){return t=[].concat(t),this.sendControlChange(6,t[0],e),t.length<2||this.sendControlChange(38,t[1],e),this}sendRpnDecrement(t,e={}){if(Array.isArray(t)||(t=r.MIDI_REGISTERED_PARAMETERS[t]),o.validation){if(t===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(r.MIDI_REGISTERED_PARAMETERS).forEach(s=>{r.MIDI_REGISTERED_PARAMETERS[s][0]===t[0]&&r.MIDI_REGISTERED_PARAMETERS[s][1]===t[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(t,e),this.sendControlChange(97,0,e),this._deselectRegisteredParameter(e),this}sendRpnIncrement(t,e={}){if(Array.isArray(t)||(t=r.MIDI_REGISTERED_PARAMETERS[t]),o.validation){if(t===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(r.MIDI_REGISTERED_PARAMETERS).forEach(s=>{r.MIDI_REGISTERED_PARAMETERS[s][0]===t[0]&&r.MIDI_REGISTERED_PARAMETERS[s][1]===t[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(t,e),this.sendControlChange(96,0,e),this._deselectRegisteredParameter(e),this}playNote(t,e={}){if(this.sendNoteOn(t,e),e.duration>0&&isFinite(String(e.duration).trim()||NaN)){let n={time:(i.toTimestamp(e.time)||o.time)+e.duration,release:e.release,rawRelease:e.rawRelease};this.sendNoteOff(t,n)}return this}sendNoteOff(t,e={}){if(o.validation){if(e.rawRelease!=null&&!(e.rawRelease>=0&&e.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(e.release!=null&&!(e.release>=0&&e.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");e.rawVelocity&&(e.rawRelease=e.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),e.velocity&&(e.release=e.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;e.rawRelease!=null?n=e.rawRelease:isNaN(e.release)||(n=Math.round(127*e.release));const s=o.octaveOffset+this.output.octaveOffset+this.octaveOffset;return i.buildNoteArray(t,{rawRelease:parseInt(n)}).forEach(l=>{this.send([(r.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),l.getOffsetNumber(s),l.rawRelease],{time:i.toTimestamp(e.time)})}),this}stopNote(t,e={}){return this.sendNoteOff(t,e)}sendNoteOn(t,e={}){if(o.validation){if(e.rawAttack!=null&&!(e.rawAttack>=0&&e.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(e.attack!=null&&!(e.attack>=0&&e.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");e.rawVelocity&&(e.rawAttack=e.velocity,e.rawRelease=e.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),e.velocity&&(e.attack=e.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;e.rawAttack!=null?n=e.rawAttack:isNaN(e.attack)||(n=Math.round(127*e.attack));const s=o.octaveOffset+this.output.octaveOffset+this.octaveOffset;return i.buildNoteArray(t,{rawAttack:n}).forEach(l=>{this.send([(r.MIDI_CHANNEL_MESSAGES.noteon<<4)+(this.number-1),l.getOffsetNumber(s),l.rawAttack],{time:i.toTimestamp(e.time)})}),this}sendChannelMode(t,e=0,n={}){if(typeof t=="string"&&(t=r.MIDI_CHANNEL_MODE_MESSAGES[t]),o.validation){if(t===void 0)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(t)||!(t>=120&&t<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(e))||e<0||e>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(r.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),t,e],{time:i.toTimestamp(n.time)}),this}sendOmniMode(t,e={}){return t===void 0||t?this.sendChannelMode("omnimodeon",0,e):this.sendChannelMode("omnimodeoff",0,e),this}sendChannelAftertouch(t,e={}){if(o.validation){if(isNaN(parseFloat(t)))throw new RangeError("Invalid channel aftertouch value.");if(e.rawValue){if(!(t>=0&&t<=127&&Number.isInteger(t)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(t>=0&&t<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return this.send([(r.MIDI_CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(127*t)],{time:i.toTimestamp(e.time)}),this}sendMasterTuning(t,e={}){if(t=parseFloat(t)||0,o.validation&&!(t>-65&&t<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let n=Math.floor(t)+64,s=t-Math.floor(t);s=Math.round((s+1)/2*16383);let l=s>>7&127,h=127&s;return this.sendRpnValue("channelcoarsetuning",n,e),this.sendRpnValue("channelfinetuning",[l,h],e),this}sendModulationRange(t,e,n={}){if(o.validation){if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!(e==null||Number.isInteger(e)&&e>=0&&e<=127))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return e>=0&&e<=127||(e=0),this.sendRpnValue("modulationrange",[t,e],n),this}sendNrpnValue(t,e,n={}){if(e=[].concat(e),o.validation){if(!Array.isArray(t)||!Number.isInteger(t[0])||!Number.isInteger(t[1]))throw new TypeError("The specified NRPN is invalid.");if(!(t[0]>=0&&t[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(t[1]>=0&&t[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");e.forEach(s=>{if(!(s>=0&&s<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")})}return this._selectNonRegisteredParameter(t,n),this._setCurrentParameter(e,n),this._deselectNonRegisteredParameter(n),this}sendPitchBend(t,e={}){if(o.validation)if(e.rawValue&&Array.isArray(t)){if(!(t[0]>=0&&t[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(t[1]>=0&&t[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(e.rawValue&&!Array.isArray(t)){if(!(t>=0&&t<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(t)||t===null)throw new RangeError("Invalid pitch bend value.");if(!(t>=-1&&t<=1))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}let n=0,s=0;if(e.rawValue&&Array.isArray(t))n=t[0],s=t[1];else if(e.rawValue&&!Array.isArray(t))n=t;else{const l=i.fromFloatToMsbLsb((t+1)/2);n=l.msb,s=l.lsb}return this.send([(r.MIDI_CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),s,n],{time:i.toTimestamp(e.time)}),this}sendPitchBendRange(t,e,n={}){if(o.validation){if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[t,e],n),this}sendProgramChange(t,e={}){if(t=parseInt(t)||0,o.validation&&!(t>=0&&t<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(r.MIDI_CHANNEL_MESSAGES.programchange<<4)+(this.number-1),t],{time:i.toTimestamp(e.time)}),this}sendRpnValue(t,e,n={}){if(Array.isArray(t)||(t=r.MIDI_REGISTERED_PARAMETERS[t]),o.validation){if(!Number.isInteger(t[0])||!Number.isInteger(t[1]))throw new TypeError("The specified NRPN is invalid.");if(!(t[0]>=0&&t[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(t[1]>=0&&t[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(e).forEach(s=>{if(!(s>=0&&s<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")})}return this._selectRegisteredParameter(t,n),this._setCurrentParameter(e,n),this._deselectRegisteredParameter(n),this}sendTuningBank(t,e={}){if(o.validation&&(!Number.isInteger(t)||!(t>=0&&t<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",t,e),this}sendTuningProgram(t,e={}){if(o.validation&&(!Number.isInteger(t)||!(t>=0&&t<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",t,e),this}sendLocalControl(t,e={}){return t?this.sendChannelMode("localcontrol",127,e):this.sendChannelMode("localcontrol",0,e)}sendAllNotesOff(t={}){return this.sendChannelMode("allnotesoff",0,t)}sendAllSoundOff(t={}){return this.sendChannelMode("allsoundoff",0,t)}sendResetAllControllers(t={}){return this.sendChannelMode("resetallcontrollers",0,t)}sendPolyphonicMode(t,e={}){return t==="mono"?this.sendChannelMode("monomodeon",0,e):this.sendChannelMode("polymodeon",0,e)}get octaveOffset(){return this._octaveOffset}set octaveOffset(t){if(this.validation&&(t=parseInt(t),isNaN(t)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=t}get output(){return this._output}get number(){return this._number}}/**
 * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
 * A port is made available by a MIDI device. A MIDI device can advertise several input and output
 * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
 * property.
 *
 * The `Output` object is automatically instantiated by the library according to the host's MIDI
 * subsystem and should not be directly instantiated.
 *
 * You can access all available `Output` objects by referring to the
 * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
 * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
 * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
 *
 * @fires Output#opened
 * @fires Output#disconnected
 * @fires Output#closed
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class M extends c{constructor(t){super(),this._midiOutput=t,this._octaveOffset=0,this.channels=[];for(let e=1;e<=16;e++)this.channels[e]=new Q(this,e);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(t=>t.destroy()),this.channels=[],this._midiOutput.onstatechange=null,await this.close(),this._midiOutput=null}_onStateChange(t){let e={timestamp:o.time};t.port.connection==="open"?(e.type="opened",e.target=this,e.port=e.target,this.emit("opened",e)):t.port.connection==="closed"&&t.port.state==="connected"?(e.type="closed",e.target=this,e.port=e.target,this.emit("closed",e)):t.port.connection==="closed"&&t.port.state==="disconnected"?(e.type="disconnected",e.port={connection:t.port.connection,id:t.port.id,manufacturer:t.port.manufacturer,name:t.port.name,state:t.port.state,type:t.port.type},this.emit("disconnected",e)):t.port.connection==="pending"&&t.port.state==="disconnected"||console.warn("This statechange event was not caught:",t.port.connection,t.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(t){return Promise.reject(t)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}send(t,e={time:0},n=0){if(t instanceof F&&(t=i.isNode?t.data:t.rawData),t instanceof Uint8Array&&i.isNode&&(t=Array.from(t)),o.validation){if(Array.isArray(t)||t instanceof Uint8Array||(t=[t],Array.isArray(e)&&(t=t.concat(e)),e=isNaN(n)?{time:0}:{time:n}),!(parseInt(t[0])>=128&&parseInt(t[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");t.slice(1).forEach(s=>{if(!((s=parseInt(s))>=0&&s<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")}),e||(e={time:0})}return this._midiOutput.send(t,i.toTimestamp(e.time)),this}sendSysex(t,e=[],n={}){if(t=[].concat(t),e instanceof Uint8Array){const s=new Uint8Array(1+t.length+e.length+1);s[0]=r.MIDI_SYSTEM_MESSAGES.sysex,s.set(Uint8Array.from(t),1),s.set(e,1+t.length),s[s.length-1]=r.MIDI_SYSTEM_MESSAGES.sysexend,this.send(s,{time:n.time})}else{const s=t.concat(e,r.MIDI_SYSTEM_MESSAGES.sysexend);this.send([r.MIDI_SYSTEM_MESSAGES.sysex].concat(s),{time:n.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():o.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(t,e={}){if(o.validation&&(t=parseInt(t),isNaN(t)||!(t>=0&&t<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([r.MIDI_SYSTEM_MESSAGES.timecode,t],{time:e.time}),this}sendSongPosition(t=0,e={}){var n=(t=Math.floor(t)||0)>>7&127,s=127&t;return this.send([r.MIDI_SYSTEM_MESSAGES.songposition,n,s],{time:e.time}),this}sendSongSelect(t=0,e={}){if(o.validation&&(t=parseInt(t),isNaN(t)||!(t>=0&&t<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([r.MIDI_SYSTEM_MESSAGES.songselect,t],{time:e.time}),this}sendTuneRequest(t={}){return this.send([r.MIDI_SYSTEM_MESSAGES.tunerequest],{time:t.time}),this}sendClock(t={}){return this.send([r.MIDI_SYSTEM_MESSAGES.clock],{time:t.time}),this}sendStart(t={}){return this.send([r.MIDI_SYSTEM_MESSAGES.start],{time:t.time}),this}sendContinue(t={}){return this.send([r.MIDI_SYSTEM_MESSAGES.continue],{time:t.time}),this}sendStop(t={}){return this.send([r.MIDI_SYSTEM_MESSAGES.stop],{time:t.time}),this}sendActiveSensing(t={}){return this.send([r.MIDI_SYSTEM_MESSAGES.activesensing],{time:t.time}),this}sendReset(t={}){return this.send([r.MIDI_SYSTEM_MESSAGES.reset],{time:t.time}),this}sendTuningRequest(t={}){return o.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(t)}sendKeyAftertouch(t,e,n={}){return n.channels==null&&(n.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendKeyAftertouch(t,e,n)}),this}sendControlChange(t,e,n={},s={}){if(o.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const l=n;(n=s).channels=l,n.channels==="all"&&(n.channels=r.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(n.channels).forEach(l=>{this.channels[l].sendControlChange(t,e,n)}),this}sendPitchBendRange(t=0,e=0,n={}){return n.channels==null&&(n.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendPitchBendRange(t,e,n)}),this}setPitchBendRange(t=0,e=0,n="all",s={}){return o.validation&&(console.warn("The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."),s.channels=n,s.channels==="all"&&(s.channels=r.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(t,e,s)}sendRpnValue(t,e,n={}){return n.channels==null&&(n.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendRpnValue(t,e,n)}),this}setRegisteredParameter(t,e=[],n="all",s={}){return o.validation&&(console.warn("The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."),s.channels=n,s.channels==="all"&&(s.channels=r.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(t,e,s)}sendChannelAftertouch(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const s=e;(e=n).channels=s,e.channels==="all"&&(e.channels=r.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(s=>{this.channels[s].sendChannelAftertouch(t,e)}),this}sendPitchBend(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const s=e;(e=n).channels=s,e.channels==="all"&&(e.channels=r.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(s=>{this.channels[s].sendPitchBend(t,e)}),this}sendProgramChange(t=0,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const s=e;(e=n).channels=s,e.channels==="all"&&(e.channels=r.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(s=>{this.channels[s].sendProgramChange(t,e)}),this}sendModulationRange(t,e,n={}){return n.channels==null&&(n.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendModulationRange(t,e,n)}),this}setModulationRange(t=0,e=0,n="all",s={}){return o.validation&&(console.warn("The setModulationRange() method is deprecated. Use sendModulationRange() instead."),s.channels=n,s.channels==="all"&&(s.channels=r.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(t,e,s)}sendMasterTuning(t,e={}){return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendMasterTuning(t,e)}),this}setMasterTuning(t,e={},n={}){return o.validation&&(console.warn("The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."),n.channels=e,n.channels==="all"&&(n.channels=r.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(t,n)}sendTuningProgram(t,e={}){return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendTuningProgram(t,e)}),this}setTuningProgram(t,e="all",n={}){return o.validation&&(console.warn("The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."),n.channels=e,n.channels==="all"&&(n.channels=r.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(t,n)}sendTuningBank(t=0,e={}){return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendTuningBank(t,e)}),this}setTuningBank(t,e="all",n={}){return o.validation&&(console.warn("The setTuningBank() method is deprecated. Use sendTuningBank() instead."),n.channels=e,n.channels==="all"&&(n.channels=r.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(t,n)}sendChannelMode(t,e=0,n={},s={}){if(o.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const l=n;(n=s).channels=l,n.channels==="all"&&(n.channels=r.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(n.channels).forEach(l=>{this.channels[l].sendChannelMode(t,e,n)}),this}sendAllSoundOff(t={}){return t.channels==null&&(t.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(t.channels).forEach(e=>{this.channels[e].sendAllSoundOff(t)}),this}sendAllNotesOff(t={}){return t.channels==null&&(t.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(t.channels).forEach(e=>{this.channels[e].sendAllNotesOff(t)}),this}sendResetAllControllers(t={},e={}){if(o.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const n=t;(t=e).channels=n,t.channels==="all"&&(t.channels=r.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendResetAllControllers(t)}),this}sendPolyphonicMode(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const s=e;(e=n).channels=s,e.channels==="all"&&(e.channels=r.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(s=>{this.channels[s].sendPolyphonicMode(t,e)}),this}sendLocalControl(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const s=e;(e=n).channels=s,e.channels==="all"&&(e.channels=r.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(s=>{this.channels[s].sendLocalControl(t,e)}),this}sendOmniMode(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const s=e;(e=n).channels=s,e.channels==="all"&&(e.channels=r.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(s=>{this.channels[s].sendOmniMode(t,e)}),this}sendNrpnValue(t,e,n={}){return n.channels==null&&(n.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendNrpnValue(t,e,n)}),this}setNonRegisteredParameter(t,e=[],n="all",s={}){return o.validation&&(console.warn("The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."),s.channels=n,s.channels==="all"&&(s.channels=r.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(t,e,s)}sendRpnIncrement(t,e={}){return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendRpnIncrement(t,e)}),this}incrementRegisteredParameter(t,e="all",n={}){return o.validation&&(console.warn("The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."),n.channels=e,n.channels==="all"&&(n.channels=r.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(t,n)}sendRpnDecrement(t,e={}){return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendRpnDecrement(t,e)}),this}decrementRegisteredParameter(t,e="all",n={}){return o.validation&&(console.warn("The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."),n.channels=e,n.channels==="all"&&(n.channels=r.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(t,n)}sendNoteOff(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const s=e;(e=n).channels=s,e.channels==="all"&&(e.channels=r.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(s=>{this.channels[s].sendNoteOff(t,e)}),this}stopNote(t,e){return this.sendNoteOff(t,e)}playNote(t,e={},n={}){if(o.validation&&(e.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),e.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(e)||Number.isInteger(e)||e==="all")){const s=e;(e=n).channels=s,e.channels==="all"&&(e.channels=r.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(s=>{this.channels[s].playNote(t,e)}),this}sendNoteOn(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const s=e;(e=n).channels=s,e.channels==="all"&&(e.channels=r.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(e.channels).forEach(s=>{this.channels[s].sendNoteOn(t,e)}),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(t){if(this.validation&&(t=parseInt(t),isNaN(t)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=t}}/**
 * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
 * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
 * to all the outputs listed in its [`destinations`](#destinations) property.
 *
 * If specific channels or message types have been defined in the [`channels`](#channels) or
 * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
 *
 * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
 * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class R{constructor(t=[],e={}){this.destinations=[],this.types=[...Object.keys(r.MIDI_SYSTEM_MESSAGES),...Object.keys(r.MIDI_CHANNEL_MESSAGES)],this.channels=r.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(t)||(t=[t]),e.types&&!Array.isArray(e.types)&&(e.types=[e.types]),e.channels&&!Array.isArray(e.channels)&&(e.channels=[e.channels]),o.validation&&(t.forEach(n=>{if(!(n instanceof M))throw new TypeError("Destinations must be of type 'Output'.")}),e.types!==void 0&&e.types.forEach(n=>{if(!r.MIDI_SYSTEM_MESSAGES.hasOwnProperty(n)&&!r.MIDI_CHANNEL_MESSAGES.hasOwnProperty(n))throw new TypeError("Type must be a valid message type.")}),e.channels!==void 0&&e.channels.forEach(n=>{if(!r.MIDI_CHANNEL_NUMBERS.includes(n))throw new TypeError("MIDI channel must be between 1 and 16.")})),this.destinations=t,e.types&&(this.types=e.types),e.channels&&(this.channels=e.channels)}forward(t){this.suspended||this.types.includes(t.type)&&(t.channel&&!this.channels.includes(t.channel)||this.destinations.forEach(e=>{(!o.validation||e instanceof M)&&e.send(t)}))}}/**
 * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
 * device. This object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
 * property.
 *
 * @fires InputChannel#midimessage
 * @fires InputChannel#unknownmessage
 *
 * @fires InputChannel#noteoff
 * @fires InputChannel#noteon
 * @fires InputChannel#keyaftertouch
 * @fires InputChannel#programchange
 * @fires InputChannel#event:controlchange-controllerxxx
 * @fires InputChannel#channelaftertouch
 * @fires InputChannel#pitchbend
 * @fires InputChannel#controlchange
 *
 * @fires InputChannel#allnotesoff
 * @fires InputChannel#allsoundoff
 * @fires InputChannel#localcontrol
 * @fires InputChannel#monomode
 * @fires InputChannel#omnimode
 * @fires InputChannel#resetallcontrollers
 *
 * @fires InputChannel#event:nrpn
 * @fires InputChannel#event:nrpn-dataentrycoarse
 * @fires InputChannel#event:nrpn-dataentryfine
 * @fires InputChannel#event:nrpn-databuttonincrement
 * @fires InputChannel#event:nrpn-databuttondecrement
 * @fires InputChannel#event:rpn
 * @fires InputChannel#event:rpn-dataentrycoarse
 * @fires InputChannel#event:rpn-dataentryfine
 * @fires InputChannel#event:rpn-databuttonincrement
 * @fires InputChannel#event:rpn-databuttondecrement
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class J extends c{constructor(t,e){super(),this._input=t,this._number=e,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(t){const e=Object.assign({},t);e.port=this.input,e.target=this,e.type="midimessage",this.emit(e.type,e),this._parseEventForStandardMessages(e)}_parseEventForStandardMessages(t){const e=Object.assign({},t);e.type=e.message.type||"unknownmessage";const n=t.message.dataBytes[0],s=t.message.dataBytes[1];if(e.type==="noteoff"||e.type==="noteon"&&s===0)this.notesState[n]=!1,e.type="noteoff",e.note=new f(i.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+o.octaveOffset),{rawAttack:0,rawRelease:s}),e.value=i.from7bitToFloat(s),e.rawValue=s,e.velocity=e.note.release,e.rawVelocity=e.note.rawRelease;else if(e.type==="noteon")this.notesState[n]=!0,e.note=new f(i.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+o.octaveOffset),{rawAttack:s}),e.value=i.from7bitToFloat(s),e.rawValue=s,e.velocity=e.note.attack,e.rawVelocity=e.note.rawAttack;else if(e.type==="keyaftertouch")e.note=new f(i.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+o.octaveOffset)),e.value=i.from7bitToFloat(s),e.rawValue=s,e.identifier=e.note.identifier,e.key=e.note.number,e.rawKey=n;else if(e.type==="controlchange"){e.controller={number:n,name:i.getCcNameByNumber(n)},e.subtype=e.controller.name||"controller"+n,e.value=i.from7bitToFloat(s),e.rawValue=s;const l=Object.assign({},e);l.type=`${e.type}-controller${n}`,delete l.subtype,this.emit(l.type,l),e.message.dataBytes[0]>=120&&this._parseChannelModeMessage(e),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(e.message.dataBytes[0])&&this._parseEventForParameterNumber(e)}else e.type==="programchange"?(e.value=n,e.rawValue=e.value):e.type==="channelaftertouch"?(e.value=i.from7bitToFloat(n),e.rawValue=n):e.type==="pitchbend"?(e.value=((s<<7)+n-8192)/8192,e.rawValue=(s<<7)+n):e.type="unknownmessage";this.emit(e.type,e)}_parseChannelModeMessage(t){const e=Object.assign({},t);e.type=e.controller.name,e.type==="localcontrol"&&(e.value=e.message.data[2]===127,e.rawValue=e.message.data[2]),e.type==="omnimodeon"?(e.type="omnimode",e.value=!0,e.rawValue=e.message.data[2]):e.type==="omnimodeoff"&&(e.type="omnimode",e.value=!1,e.rawValue=e.message.data[2]),e.type==="monomodeon"?(e.type="monomode",e.value=!0,e.rawValue=e.message.data[2]):e.type==="polymodeon"&&(e.type="monomode",e.value=!1,e.rawValue=e.message.data[2]),this.emit(e.type,e)}_parseEventForParameterNumber(t){const e=t.message.dataBytes[0],n=t.message.dataBytes[1],s=r.MIDI_CONTROL_CHANGE_MESSAGES;e===s.nonregisteredparameterfine||e===s.registeredparameterfine?(this._nrpnBuffer=[],this._rpnBuffer=[],e===s.nonregisteredparameterfine?this._nrpnBuffer=[t.message]:n!==127&&(this._rpnBuffer=[t.message])):e===s.nonregisteredparametercoarse||e===s.registeredparametercoarse?e===s.nonregisteredparametercoarse?(this._rpnBuffer=[],this._nrpnBuffer.length===1?this._nrpnBuffer.push(t.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],this._rpnBuffer.length===1&&n!==127?this._rpnBuffer.push(t.message):this._rpnBuffer=[]):e!==s.dataentrycoarse&&e!==s.dataentryfine&&e!==s.databuttonincrement&&e!==s.databuttondecrement||(this._rpnBuffer.length===2?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],t):this._nrpnBuffer.length===2?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],t):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(t){return t===r.MIDI_CONTROL_CHANGE_MESSAGES.dataentrycoarse||t===r.MIDI_CONTROL_CHANGE_MESSAGES.dataentryfine||t===r.MIDI_CONTROL_CHANGE_MESSAGES.databuttonincrement||t===r.MIDI_CONTROL_CHANGE_MESSAGES.databuttondecrement||t===r.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparametercoarse||t===r.MIDI_CONTROL_CHANGE_MESSAGES.nonregisteredparameterfine||t===r.MIDI_CONTROL_CHANGE_MESSAGES.registeredparametercoarse||t===r.MIDI_CONTROL_CHANGE_MESSAGES.registeredparameterfine}_dispatchParameterNumberEvent(t,e,n,s){t=t==="nrpn"?"nrpn":"rpn";const l={target:s.target,timestamp:s.timestamp,message:s.message,parameterMsb:e,parameterLsb:n,value:i.from7bitToFloat(s.message.dataBytes[1]),rawValue:s.message.dataBytes[1]};l.parameter=t==="rpn"?Object.keys(r.MIDI_REGISTERED_PARAMETERS).find(C=>r.MIDI_REGISTERED_PARAMETERS[C][0]===e&&r.MIDI_REGISTERED_PARAMETERS[C][1]===n):(e<<7)+n;const h=i.getPropertyByValue(r.MIDI_CONTROL_CHANGE_MESSAGES,s.message.dataBytes[0]);l.type=`${t}-${h}`,this.emit(l.type,l),l.type=t,l.subtype=h,this.emit(l.type,l)}getChannelModeByNumber(t){return o.validation&&(console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."),t=Math.floor(t)),i.getChannelModeByNumber(t)}getCcNameByNumber(t){if(o.validation&&(console.warn("The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."),!((t=parseInt(t))>=0&&t<=127)))throw new RangeError("Invalid control change number.");return i.getCcNameByNumber(t)}getNoteState(t){t instanceof f&&(t=t.identifier);const e=i.guessNoteNumber(t,o.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[e]}get octaveOffset(){return this._octaveOffset}set octaveOffset(t){if(this.validation&&(t=parseInt(t),isNaN(t)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=t}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(t){this.validation&&(t=!!t),this.parameterNumberEventsEnabled=t}}/**
 * The `Message` class represents a single MIDI message. It has several properties that make it
 * easy to make sense of the binary data it contains.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class F{constructor(t){this.rawData=t,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=1+(15&this.statusByte)):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=i.getPropertyByValue(r.MIDI_CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=i.getPropertyByValue(r.MIDI_SYSTEM_MESSAGES,this.command)),this.statusByte===r.MIDI_SYSTEM_MESSAGES.sysex&&(this.dataBytes[0]===0?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}/**
 * The `Input` class represents a single MIDI input port. This object is automatically instantiated
 * by the library according to the host's MIDI subsystem and does not need to be directly
 * instantiated. Instead, you can access all `Input` objects by referring to the
 * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
 * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
 * [`WebMidi.getInputById()`](WebMidi#getInputById).
 *
 * Note that a single MIDI device may expose several inputs and/or outputs.
 *
 * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
 * (such as [`noteon`](InputChannel#event:noteon) or
 * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
 * object does that. However, you can still use the
 * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
 * [`InputChannel`](InputChannel) objects at once.
 *
 * @fires Input#opened
 * @fires Input#disconnected
 * @fires Input#closed
 * @fires Input#midimessage
 *
 * @fires Input#sysex
 * @fires Input#timecode
 * @fires Input#songposition
 * @fires Input#songselect
 * @fires Input#tunerequest
 * @fires Input#clock
 * @fires Input#start
 * @fires Input#continue
 * @fires Input#stop
 * @fires Input#activesensing
 * @fires Input#reset
 *
 * @fires Input#unknownmidimessage
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class X extends c{constructor(t){super(),this._midiInput=t,this._octaveOffset=0,this.channels=[];for(let e=1;e<=16;e++)this.channels[e]=new J(this,e);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(t=>t.destroy()),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(t){let e={timestamp:o.time,target:this,port:this};t.port.connection==="open"?(e.type="opened",this.emit("opened",e)):t.port.connection==="closed"&&t.port.state==="connected"?(e.type="closed",this.emit("closed",e)):t.port.connection==="closed"&&t.port.state==="disconnected"?(e.type="disconnected",e.port={connection:t.port.connection,id:t.port.id,manufacturer:t.port.manufacturer,name:t.port.name,state:t.port.state,type:t.port.type},this.emit("disconnected",e)):t.port.connection==="pending"&&t.port.state==="disconnected"||console.warn("This statechange event was not caught: ",t.port.connection,t.port.state)}_onMidiMessage(t){const e=new F(t.data),n={port:this,target:this,message:e,timestamp:t.timeStamp,type:"midimessage",data:e.data,rawData:e.data,statusByte:e.data[0],dataBytes:e.dataBytes};this.emit("midimessage",n),e.isSystemMessage?this._parseEvent(n):e.isChannelMessage&&this.channels[e.channel]._processMidiMessageEvent(n),this._forwarders.forEach(s=>s.forward(e))}_parseEvent(t){const e=Object.assign({},t);e.type=e.message.type||"unknownmidimessage",e.type==="songselect"&&(e.song=t.data[1]+1,e.value=t.data[1],e.rawValue=e.value),this.emit(e.type,e)}async open(){try{await this._midiInput.open()}catch(t){return Promise.reject(t)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(t){return Promise.reject(t)}return Promise.resolve(this)}getChannelModeByNumber(){o.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.")}addListener(t,e,n={}){if(o.validation&&typeof n=="function"){let s=e!=null?[].concat(e):void 0;e=n,n={channels:s}}if(r.CHANNEL_EVENTS.includes(t)){n.channels===void 0&&(n.channels=r.MIDI_CHANNEL_NUMBERS);let s=[];return i.sanitizeChannels(n.channels).forEach(l=>{s.push(this.channels[l].addListener(t,e,n))}),s}return super.addListener(t,e,n)}addOneTimeListener(t,e,n={}){return n.remaining=1,this.addListener(t,e,n)}on(t,e,n,s){return this.addListener(t,e,n,s)}hasListener(t,e,n={}){if(o.validation&&typeof n=="function"){let s=[].concat(e);e=n,n={channels:s}}return r.CHANNEL_EVENTS.includes(t)?(n.channels===void 0&&(n.channels=r.MIDI_CHANNEL_NUMBERS),i.sanitizeChannels(n.channels).every(s=>this.channels[s].hasListener(t,e))):super.hasListener(t,e)}removeListener(t,e,n={}){if(o.validation&&typeof n=="function"){let s=[].concat(e);e=n,n={channels:s}}if(n.channels===void 0&&(n.channels=r.MIDI_CHANNEL_NUMBERS),t==null)return i.sanitizeChannels(n.channels).forEach(s=>{this.channels[s]&&this.channels[s].removeListener()}),super.removeListener();r.CHANNEL_EVENTS.includes(t)?i.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].removeListener(t,e,n)}):super.removeListener(t,e,n)}addForwarder(t,e={}){let n;return n=t instanceof R?t:new R(t,e),this._forwarders.push(n),n}removeForwarder(t){this._forwarders=this._forwarders.filter(e=>e!==t)}hasForwarder(t){return this._forwarders.includes(t)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(t){if(this.validation&&(t=parseInt(t),isNaN(t)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=t}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return o.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}/**
 * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
 * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
 *
 * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
 * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
 * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
 * module) version, you get an already-instantiated object when you import the module.
 *
 * @fires WebMidi#connected
 * @fires WebMidi#disabled
 * @fires WebMidi#disconnected
 * @fires WebMidi#enabled
 * @fires WebMidi#error
 * @fires WebMidi#midiaccessgranted
 * @fires WebMidi#portschanged
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */const o=new class extends c{constructor(){super(),this.defaults={note:{attack:i.from7bitToFloat(64),release:i.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(a={},t=!1){if(i.isNode){try{window.navigator}catch{global.navigator=await Object.getPrototypeOf(async function(){}).constructor(`
        let jzz = await import("jzz");
        return jzz.default;
        `)()}try{}catch{global.performance=await Object.getPrototypeOf(async function(){}).constructor(`
        let perf_hooks = await import("perf_hooks");
        return perf_hooks.performance;
        `)()}}if(this.validation=a.validation!==!1,this.validation&&(typeof a=="function"&&(a={callback:a,sysex:t}),t&&(a.sysex=!0)),this.enabled)return typeof a.callback=="function"&&a.callback(),Promise.resolve();const e={timestamp:this.time,target:this,type:"error",error:void 0},n={timestamp:this.time,target:this,type:"midiaccessgranted"},s={timestamp:this.time,target:this,type:"enabled"};try{typeof a.requestMIDIAccessFunction=="function"?this.interface=await a.requestMIDIAccessFunction({sysex:a.sysex,software:a.software}):this.interface=await navigator.requestMIDIAccess({sysex:a.sysex,software:a.software})}catch(l){return e.error=l,this.emit("error",e),typeof a.callback=="function"&&a.callback(l),Promise.reject(l)}this.emit("midiaccessgranted",n),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(l){return e.error=l,this.emit("error",e),typeof a.callback=="function"&&a.callback(l),Promise.reject(l)}return this.emit("enabled",s),typeof a.callback=="function"&&a.callback(),Promise.resolve(this)}async disable(){return this._destroyInputsAndOutputs().then(()=>{navigator&&typeof navigator.close=="function"&&navigator.close(),this.interface&&(this.interface.onstatechange=void 0),this.interface=null;let a={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",a),this.removeListener()})}getInputById(a,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!a)return}if(t.disconnected){for(let e=0;e<this._disconnectedInputs.length;e++)if(this._disconnectedInputs[e].id===a.toString())return this._disconnectedInputs[e]}else for(let e=0;e<this.inputs.length;e++)if(this.inputs[e].id===a.toString())return this.inputs[e]}getInputByName(a,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!a)return;a=a.toString()}if(t.disconnected){for(let e=0;e<this._disconnectedInputs.length;e++)if(~this._disconnectedInputs[e].name.indexOf(a))return this._disconnectedInputs[e]}else for(let e=0;e<this.inputs.length;e++)if(~this.inputs[e].name.indexOf(a))return this.inputs[e]}getOutputByName(a,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!a)return;a=a.toString()}if(t.disconnected){for(let e=0;e<this._disconnectedOutputs.length;e++)if(~this._disconnectedOutputs[e].name.indexOf(a))return this._disconnectedOutputs[e]}else for(let e=0;e<this.outputs.length;e++)if(~this.outputs[e].name.indexOf(a))return this.outputs[e]}getOutputById(a,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!a)return}if(t.disconnected){for(let e=0;e<this._disconnectedOutputs.length;e++)if(this._disconnectedOutputs[e].id===a.toString())return this._disconnectedOutputs[e]}else for(let e=0;e<this.outputs.length;e++)if(this.outputs[e].id===a.toString())return this.outputs[e]}noteNameToNumber(a){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),i.toNoteNumber(a,this.octaveOffset)}getOctave(a){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),a=parseInt(a)),!isNaN(a)&&a>=0&&a<=127&&i.getNoteDetails(i.offsetNumber(a,this.octaveOffset)).octave}sanitizeChannels(a){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),i.sanitizeChannels(a)}toMIDIChannels(a){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),i.sanitizeChannels(a)}guessNoteNumber(a){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),i.guessNoteNumber(a,this.octaveOffset)}getValidNoteArray(a,t={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),i.buildNoteArray(a,t)}convertToTimestamp(a){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),i.toTimestamp(a)}async _destroyInputsAndOutputs(){let a=[];return this.inputs.forEach(t=>a.push(t.destroy())),this.outputs.forEach(t=>a.push(t.destroy())),Promise.all(a).then(()=>{this._inputs=[],this._outputs=[]})}_onInterfaceStateChange(a){this._updateInputsAndOutputs();let t={timestamp:a.timeStamp,type:a.port.state,target:this};if(a.port.state==="connected"&&a.port.connection==="open"){a.port.type==="output"?t.port=this.getOutputById(a.port.id):a.port.type==="input"&&(t.port=this.getInputById(a.port.id)),this.emit(a.port.state,t);const e=Object.assign({},t);e.type="portschanged",this.emit(e.type,e)}else if(a.port.state==="disconnected"&&a.port.connection==="pending"){a.port.type==="input"?t.port=this.getInputById(a.port.id,{disconnected:!0}):a.port.type==="output"&&(t.port=this.getOutputById(a.port.id,{disconnected:!0})),this.emit(a.port.state,t);const e=Object.assign({},t);e.type="portschanged",this.emit(e.type,e)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let t=this._inputs.length-1;t>=0;t--){const e=this._inputs[t];Array.from(this.interface.inputs.values()).find(n=>n===e._midiInput)||(this._disconnectedInputs.push(e),this._inputs.splice(t,1))}let a=[];return this.interface.inputs.forEach(t=>{if(!this._inputs.find(e=>e._midiInput===t)){let e=this._disconnectedInputs.find(n=>n._midiInput===t);e||(e=new X(t)),this._inputs.push(e),a.push(e.open())}}),Promise.all(a)}async _updateOutputs(){if(!this.interface)return;for(let t=this._outputs.length-1;t>=0;t--){const e=this._outputs[t];Array.from(this.interface.outputs.values()).find(n=>n===e._midiOutput)||(this._disconnectedOutputs.push(e),this._outputs.splice(t,1))}let a=[];return this.interface.outputs.forEach(t=>{if(!this._outputs.find(e=>e._midiOutput===t)){let e=this._disconnectedOutputs.find(n=>n._midiOutput===t);e||(e=new M(t)),this._outputs.push(e),a.push(e.open())}}),Promise.all(a)}get enabled(){return this.interface!==null}get inputs(){return this._inputs}get isNode(){return this.validation&&console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead."),i.isNode}get isBrowser(){return this.validation&&console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead."),i.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(a){if(this.validation&&(a=parseInt(a),isNaN(a)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=a}get outputs(){return this._outputs}get supported(){return typeof navigator!="undefined"&&navigator.requestMIDIAccess}get sysexEnabled(){return!(!this.interface||!this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.0.19"}get CHANNEL_EVENTS(){return this.validation&&console.warn("The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."),r.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.MIDI_SYSTEM_MESSAGES."),r.MIDI_SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.MIDI_CHANNEL_MODE_MESSAGES."),r.MIDI_CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been moved to Enumerations.MIDI_CONTROL_CHANGE_MESSAGES."),r.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.MIDI_REGISTERED_PARAMETERS."),this.MIDI_REGISTERED_PARAMETERS}get NOTES(){return this.validation&&console.warn("The NOTES enum has been deprecated."),["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}};o.constructor=null;const N={data:new URL("/assets/libfaust-wasm.82532c6c.data",self.location),wasm:new URL("/assets/libfaust-wasm.411da002.wasm",self.location)},z=!1,Z=!1,ee=void 0;let Y=!1,v,m,d=[];const u=4;let b=0,p=-1,E="",w=!1,$;const te=document.getElementById("main-screen"),ne=document.getElementById("start-screen"),y=document.getElementById("evolve-btn"),g=document.getElementById("code-overlay"),I=document.getElementById("code-box"),se=document.getElementById("synth-row"),S=document.getElementById("progress-bar");for(let a=0;a<u;a++){let e="";for(let s=0;s<13;s++)e+=`<div class="mfcc-bar" id="bar-${a}-${s}"></div>`;const n=`
    <div class="context-panel" id="panel${a}">
      <iframe id="ui${a}" src="./faust-ui.html" height="100px" width="50px"></iframe>
      <div class="indicators"></div>
      <div class="control-box">
        <button id="process-code-show-${a}">Show process code</button>
        <button id="full-code-show-${a}">Show full code</button>
        <button id="stop-${a}">Stop note(s)</button>
        <button class="ctx-select" id="ctx-select-${a}">Select for MIDI</button>
        <button class="favourite-select" id="select-favourite-${a}">Select for evolution</button>
      </div>
      <div class="mfcc-box" id="mfcc${a}">
        ${e}
      </div>
    </div>
  `;se.innerHTML+=n}const _={};for(let a=0;a<u;a++)_[a]=document.getElementById(`panel${a}`);function j(a){if(!!Y){a===void 0&&(a=(b+1)%u),b=a;for(let t=0;t<u;t++)t===a?_[t].classList.add("midi-enabled"):_[t].classList.remove("midi-enabled")}}function ae(a){d[a].allNotesOff()}function re(a){a===p?(p=-1,y.classList.add("inactive")):(p=a,y.classList.remove("inactive"));for(let t=0;t<u;t++)t===p?_[t].classList.add("favourite"):_[t].classList.remove("favourite")}function A(){g.style.display="none"}function ie(a){const t=`process${a}`;t===E?(E="",A()):(E=t,I.innerText=d[a].processCode,g.classList.add("showing-process-code"),g.style.display="flex")}function oe(a){const t=`full${a}`;t===E?(E="",A()):(E=t,I.innerText=d[a].fullCode,g.classList.remove("showing-process-code"),g.style.display="flex")}async function le(){const a=I.innerText;await navigator.clipboard.writeText(a),console.log("yes")}async function ce(){const a=I.innerText;await q(a)}async function he(){te.style.display="flex",ne.style.display="none",v=new window.AudioContext,m=new V.exports.Faust({debug:z,wasmLocation:N.wasm.toString(),dataLocation:N.data.toString()}),await m.ready,$=new W(S,m,v,Z,u);for(let a=0;a<u;a++)d.push(new K(a,v,ee));await Promise.all(d.map(a=>a.compile(m)));{await o.enable();const a=o.inputs.length;a<1?(console.log("No MIDI input devices detected."),Array.prototype.forEach.call(document.getElementsByClassName("ctx-select"),t=>t.classList.add("inactive")),Array.prototype.forEach.call(document.getElementsByClassName("indicators"),t=>t.classList.add("midi-disabled"))):(console.log(`Detected ${a} MIDI input device${a==1?"":"s"}:
- ${o.inputs.map(t=>t.name).join(`
- `)}`),Y=!0,j(0),o.inputs.forEach(t=>{t.addListener("midimessage",e=>{d[b].midiMessage(e.message.data),`${e.message.type}${t.name}`})}))}}async function de(){if(w||p===-1)return;w=!0,S.style.width="0%",y.classList.add("inactive");const a=d[p].topology,t=await $.evolve(a);for(let e=0;e<u;e++)e<t.length?d[e].setTopology(t[e].topology):d[e].generateSynth();m=new V.exports.Faust({debug:z,wasmLocation:N.wasm.toString(),dataLocation:N.data.toString()}),await m.ready,await Promise.all(d.map(e=>e.compile(m))),S.style.width="100%",y.classList.remove("inactive"),w=!1}var O,D,B,L,P;for(let a=0;a<u;a++)(O=document.getElementById(`ctx-select-${a}`))==null||O.addEventListener("click",()=>j(a)),(D=document.getElementById(`stop-${a}`))==null||D.addEventListener("click",()=>ae(a)),(B=document.getElementById(`select-favourite-${a}`))==null||B.addEventListener("click",()=>re(a)),(L=document.getElementById(`process-code-show-${a}`))==null||L.addEventListener("click",()=>ie(a)),(P=document.getElementById(`full-code-show-${a}`))==null||P.addEventListener("click",()=>oe(a));var k;(k=document.getElementById("code-close"))==null||k.addEventListener("click",()=>A());var G;(G=document.getElementById("code-copy"))==null||G.addEventListener("click",async()=>le());var H;(H=document.getElementById("code-save"))==null||H.addEventListener("click",async()=>ce());var U;(U=document.getElementById("evolve-btn"))==null||U.addEventListener("click",()=>de());var x;(x=document.getElementById("start-btn"))==null||x.addEventListener("click",async()=>await he());
